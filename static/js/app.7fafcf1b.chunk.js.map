{"version":3,"sources":["pages/ColorGenerator.tsx","App.tsx","assets/ogimage.png"],"names":["DEFAULT_COLOR_CODES","ColorGenerator","useState","map","color","picked","colors","setColors","Array","pickedColors","setPickedColors","colorCodes","colorStatus","onColorPressed","index","newColor","newPickedColors","forEach","push","updatePickedColors","View","style","flexDirection","justifyContent","flexWrap","flex","minWidth","title","onPress","i","length","splice","colorStatu","array","getRandomColor","CandidateColorView","props","colorBlockList","colorCode","onPressed","ScrollView","contentContainerStyle","styles","colorBlocksContainer","ColorBlock","flexAnim","useRef","Animated","Value","current","minWidthAnim","useEffect","timing","toValue","duration","useNativeDriver","start","backgroundColor","minHeight","TouchableOpacity","Text","colorCodeText","pickedText","PickedColorView","pickedColorList","width","height","margin","copyButton","type","icon","name","copyText","join","message","navigator","clipboard","writeText","then","alert","alignItems","result","randomNum","Math","floor","random","hexStr","parseInt","toString","padStart","StyleSheet","create","textAlign","textShadowColor","textShadowOffset","textShadowRadius","fontSize","fontWeight","flexGrow","flexBasis","App","container","Helmet","content","property","packageJson","homepage","require","Icon","marginHorizontal","Linking","openURL","footer","version","StatusBar","padding","module","exports"],"mappings":"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","file":"static/js/app.7fafcf1b.chunk.js","sourcesContent":["import React, { FC, Fragment, ReactElement, useEffect, useRef, useState } from 'react';\r\nimport { Animated, ScrollView, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\r\nimport { Button, Icon } from 'react-native-elements';\r\n\r\nconst DEFAULT_COLOR_CODES: Array<string> = [\r\n    '#cf1a0c', '#cf6000', '#a3cb00', '#29c900', '#03da4d', '#02cdcf', '#0140cf', '#0b03cf', '#cf006b'\r\n]\r\n\r\nconst ColorGenerator: FC = () => {\r\n    const [colors, setColors] = useState(DEFAULT_COLOR_CODES.map(color => {\r\n        return {\r\n            color: color,\r\n            picked: false\r\n        }\r\n    }));\r\n    const [pickedColors, setPickedColors] = useState(new Array<string>());\r\n    const updatePickedColors = (newColor: Array<IColorBlockStatu>) => {\r\n        const newPickedColors: Array<string> = Array<string>();\r\n        newColor.forEach(color => {\r\n            if (color.picked) {\r\n                newPickedColors.push(color.color);\r\n            }\r\n        });\r\n        setPickedColors(newPickedColors);\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <PickedColorView colorCodes={pickedColors}></PickedColorView>\r\n            <CandidateColorView colorStatus={colors} onColorPressed={(index) => {\r\n                const newColor: Array<IColorBlockStatu> = new Array<IColorBlockStatu>(...colors);\r\n                newColor[index].picked = !newColor[index].picked;\r\n                setColors(newColor);\r\n                updatePickedColors(newColor);\r\n            }} />\r\n            <View style={{ flexDirection: 'row', justifyContent: 'center', flexWrap: 'wrap' }}>\r\n                <View style={{ flex: 1, minWidth: 300 }}>\r\n                    <Button title='Clear unpicked color' onPress={() => {\r\n                        const newColor: Array<IColorBlockStatu> = new Array<IColorBlockStatu>(...colors);\r\n                        for (let i: number = newColor.length - 1; i >= 0 && newColor.length > 1; i--) {\r\n                            if (newColor[i].picked === false) {\r\n                                newColor.splice(i, 1);\r\n                            }\r\n                        }\r\n                        setColors(newColor);\r\n                    }} />\r\n                </View>\r\n                <View style={{ flex: 1, minWidth: 300 }}>\r\n                    <Button title='Random generate unpicked color' onPress={() => {\r\n                        const newColor: Array<IColorBlockStatu> = new Array<IColorBlockStatu>(...colors);\r\n                        newColor.forEach((colorStatu, index, array) => {\r\n                            if (!colorStatu.picked) {\r\n                                array[index].color = getRandomColor();\r\n                            }\r\n                        })\r\n                        setColors(newColor);\r\n                    }} />\r\n                </View>\r\n                <View style={{ flex: 1, minWidth: 300 }}>\r\n                    <Button title='Add new color' onPress={() => {\r\n                        const newColor: Array<IColorBlockStatu> = new Array<IColorBlockStatu>(...colors);\r\n                        newColor.push({\r\n                            color: getRandomColor(),\r\n                            picked: false\r\n                        });\r\n                        setColors(newColor);\r\n                    }} />\r\n                </View>\r\n            </View>\r\n        </Fragment>\r\n    );\r\n}\r\nexport default ColorGenerator;\r\n\r\ninterface IColorBlockStatu {\r\n    color: string;\r\n    picked: boolean;\r\n}\r\n\r\ninterface ICandidateColorViewProp {\r\n    colorStatus: Array<IColorBlockStatu>;\r\n    onColorPressed(index: number): void;\r\n}\r\n\r\nconst CandidateColorView: FC<ICandidateColorViewProp> = (props) => {\r\n    const { colorStatus, onColorPressed } = props;\r\n    const colorBlockList: Array<ReactElement> = colorStatus.map((colorStatu, index) => (\r\n        <ColorBlock key={index} colorCode={colorStatu.color} picked={colorStatu.picked} onPressed={() => onColorPressed(index)} />\r\n    ));\r\n    return (\r\n        <ScrollView contentContainerStyle={styles.colorBlocksContainer}>\r\n            {colorBlockList}\r\n        </ScrollView >\r\n    );\r\n}\r\n\r\ninterface IColorBlockProp {\r\n    colorCode: string;\r\n    picked: boolean;\r\n    onPressed(): void;\r\n}\r\n\r\nconst ColorBlock: FC<IColorBlockProp> = (props) => {\r\n    const { colorCode, picked, onPressed } = props;\r\n    const flexAnim: Animated.Value = useRef(new Animated.Value(0)).current;\r\n    const minWidthAnim: Animated.Value = useRef(new Animated.Value(24)).current;\r\n    useEffect(() => {\r\n        Animated.timing(\r\n            flexAnim, {\r\n            toValue: 1,\r\n            duration: 666,\r\n            useNativeDriver: false\r\n        }\r\n        ).start();\r\n    }, [flexAnim]);\r\n    useEffect(() => {\r\n        Animated.timing(\r\n            minWidthAnim, {\r\n            toValue: 128,\r\n            duration: 666,\r\n            useNativeDriver: false\r\n        }\r\n        ).start();\r\n    }, [minWidthAnim]);\r\n    return (\r\n        <Animated.View style={{ backgroundColor: colorCode, flex: flexAnim, minWidth: minWidthAnim, minHeight: 64 }}>\r\n            <TouchableOpacity style={{ flex: 1, justifyContent: 'center' }} onPress={() => onPressed()}>\r\n                <Text style={styles.colorCodeText}>{colorCode}</Text>\r\n                <Text style={styles.pickedText}>{picked ? 'Picked!' : ''}</Text>\r\n            </TouchableOpacity>\r\n        </Animated.View>\r\n    );\r\n}\r\n\r\ninterface IPickedColorViewProp {\r\n    colorCodes: Array<string>;\r\n}\r\n\r\nconst PickedColorView: FC<IPickedColorViewProp> = (props) => {\r\n    const { colorCodes } = props;\r\n    const pickedColorList: Array<ReactElement> = colorCodes.map((colorCode, index) => (\r\n        <View key={index} style={{ backgroundColor: colorCode, width: 24, height: 24, margin: 1 }}></View>\r\n    ));\r\n    const copyButton: ReactElement = (\r\n        <Button\r\n            type='clear'\r\n            icon={\r\n                <Icon name='copy' type='font-awesome-5' color='#ffffff' />\r\n            }\r\n            onPress={() => {\r\n                const copyText: string = colorCodes.join('\\n');\r\n                const message: string = `${colorCodes.length} ${colorCodes.length === 1 ? 'color is' : 'colors are'} copied👌\\n ` + colorCodes.join(', ');\r\n                navigator.clipboard\r\n                    .writeText(copyText)\r\n                    .then(() => {\r\n                        alert(message);\r\n                    });\r\n            }}\r\n        />\r\n    );\r\n    return (\r\n        <View style={{ justifyContent: 'center', alignItems: 'center', flexWrap: 'wrap', flexDirection: 'row', minHeight: 42 }}>\r\n            <Text style={{ color: '#ffffff' }}>Picked colors: </Text>\r\n            {pickedColorList}\r\n            {pickedColorList.length > 0 ? copyButton : null}\r\n        </View>\r\n    );\r\n}\r\n\r\nfunction getRandomColor(): string {\r\n    let result: string = '#';\r\n    while (result.length < 7) {\r\n        let randomNum: number = Math.floor(Math.random() * 255);\r\n        let hexStr: string = decimalToHexadecimal(randomNum);\r\n        hexStr = hexStr.padStart(2, '0');\r\n        result += hexStr;\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction decimalToHexadecimal(value: number): string {\r\n    return parseInt(value.toString()).toString(16);\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    colorCodeText: {\r\n        color: '#ffffff',\r\n        textAlign: 'center',\r\n        textShadowColor: 'black',\r\n        textShadowOffset: { width: 1, height: 1 },\r\n        textShadowRadius: 4\r\n    },\r\n    pickedText: {\r\n        fontSize: 24,\r\n        fontWeight: 'bold',\r\n        textAlign: 'center',\r\n        textShadowColor: 'black',\r\n        textShadowOffset: { width: 3, height: 3 },\r\n        textShadowRadius: 4,\r\n        color: '#ffffff'\r\n    },\r\n    colorBlocksContainer: {\r\n        flexGrow: 1,\r\n        flexBasis: 0,\r\n        flexWrap: 'wrap',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around'\r\n    }\r\n});\r\n","import { StatusBar } from 'expo-status-bar';\r\nimport { Linking, StyleSheet, Text, View } from 'react-native';\r\nimport { Icon } from 'react-native-elements/dist/icons/Icon';\r\nimport { Helmet } from 'react-helmet';\r\nimport ColorGenerator from './pages/ColorGenerator';\r\nimport packageJson from './package.json';\r\n\r\nexport default function App() {\r\n  return (\r\n    <View style={styles.container}>\r\n      <Helmet>\r\n        <title>Random Color Generator</title>\r\n        <meta name='description' content='A random color generator for people who are struggling to find a color.😘' />\r\n        <meta name='keywords' content='color generator,YY' />\r\n        <meta property='og:title' content='Random Color Generator' />\r\n        <meta property='og:description' content='A random color generator for people who are struggling to find a color.😘' />\r\n        <meta property='og:type' content='website' />\r\n        <meta property='og:url' content={packageJson.homepage} />\r\n        <meta property='og:image' content={require('./assets/ogimage.png')} />\r\n        <meta name='theme-color' content='#111111' />\r\n      </Helmet>\r\n      <Text style={styles.title}>Color Generator</Text>\r\n      <ColorGenerator />\r\n      <View>\r\n        <Icon\r\n          style={{ width: 24, marginHorizontal: 'auto' }}\r\n          name='github'\r\n          type='font-awesome-5'\r\n          color='#ffffff'\r\n          onPress={() => Linking.openURL('https://github.com/avt1745zet/color-generator-online.git')}\r\n        />\r\n        <Text style={styles.footer}>\r\n          Version: {packageJson.version}\r\n        </Text>\r\n      </View>\r\n      <StatusBar style='auto' />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#111111',\r\n  },\r\n  title: {\r\n    color: '#ffffff',\r\n    fontSize: 40,\r\n    textAlign: 'center',\r\n    margin: 4\r\n  },\r\n  footer: {\r\n    color: '#ffffff',\r\n    textAlign: 'center',\r\n    padding: 2\r\n  }\r\n});\r\n","module.exports = __webpack_public_path__ + \"static/media/ogimage.2ddb989f.png\";"],"sourceRoot":""}