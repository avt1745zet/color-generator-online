{"version":3,"sources":["components/ColorGenerator.tsx","App.tsx","assets/ogimage.png"],"names":["DEFAULT_COLORS","ColorGenerator","useState","map","color","picked","colors","setColors","Array","pickedColors","setPickedColors","View","style","flexDirection","justifyContent","flexWrap","flex","minWidth","Button","title","onPress","newColor","i","length","splice","forEach","colorStatu","index","array","getRandomColor","push","colorStatus","onColorPressed","newPickedColors","updatePickedColors","CandidateColorView","props","candidateColorList","TouchableOpacity","backgroundColor","minHeight","alignContent","Text","styles","colorCodeText","pickedText","PickedColorView","pickedColorList","width","height","result","randomNum","Math","floor","random","hexStr","parseInt","toString","padStart","StyleSheet","create","textAlign","textShadowColor","textShadowOffset","textShadowRadius","fontSize","fontWeight","App","container","Helmet","name","content","property","packageJson","homepage","require","footer","version","StatusBar","padding","module","exports"],"mappings":"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","file":"static/js/app.15c41bf2.chunk.js","sourcesContent":["import { FC, Fragment, ReactElement, useState } from 'react';\r\nimport { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\r\n\r\nconst DEFAULT_COLORS: Array<string> = [\r\n    '#000000', '#111111', '#222222', '#333333', '#444444', '#555555', '#666666', '#777777', '#888888', '#999999'\r\n]\r\n\r\nconst ColorGenerator: FC = () => {\r\n    const [colors, setColors] = useState(DEFAULT_COLORS.map(color => {\r\n        return {\r\n            color: color,\r\n            picked: false\r\n        }\r\n    }));\r\n    const [pickedColors, setPickedColors] = useState(new Array<string>());\r\n    const updatePickedColors = (newColor: Array<IColorBlockStatu>) => {\r\n        const newPickedColors: Array<string> = Array<string>();\r\n        newColor.forEach(color => {\r\n            if (color.picked) {\r\n                newPickedColors.push(color.color);\r\n            }\r\n        });\r\n        setPickedColors(newPickedColors);\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <PickedColorView colors={pickedColors}></PickedColorView>\r\n            <View style={{ flexDirection: 'row', justifyContent: 'center', flexWrap: 'wrap' }}>\r\n                <View style={{ flex: 1, minWidth: 300 }}>\r\n                    <Button title='Clear unpicked color' color='black' onPress={() => {\r\n                        const newColor: Array<IColorBlockStatu> = new Array<IColorBlockStatu>(...colors);\r\n                        for (let i: number = newColor.length - 1; i >= 0 && newColor.length > 1; i--) {\r\n                            if (newColor[i].picked === false) {\r\n                                newColor.splice(i, 1);\r\n                            }\r\n                        }\r\n                        setColors(newColor);\r\n                    }} />\r\n                </View>\r\n                <View style={{ flex: 1, minWidth: 300 }}>\r\n                    <Button title='Random unpicked color' color='black' onPress={() => {\r\n                        const newColor: Array<IColorBlockStatu> = new Array<IColorBlockStatu>(...colors);\r\n                        newColor.forEach((colorStatu, index, array) => {\r\n                            if (!colorStatu.picked) {\r\n                                array[index].color = getRandomColor();\r\n                            }\r\n                        })\r\n                        setColors(newColor);\r\n                    }} />\r\n                </View>\r\n                <View style={{ flex: 1, minWidth: 300 }}>\r\n                    <Button title='Add new color' color='black' onPress={() => {\r\n                        const newColor: Array<IColorBlockStatu> = new Array<IColorBlockStatu>(...colors);\r\n                        newColor.push({\r\n                            color: getRandomColor(),\r\n                            picked: false\r\n                        });\r\n                        setColors(newColor);\r\n                    }} />\r\n                </View>\r\n            </View>\r\n            <CandidateColorView colorStatus={colors} onColorPressed={(index) => {\r\n                const newColor: Array<IColorBlockStatu> = new Array<IColorBlockStatu>(...colors);\r\n                newColor[index].picked = !newColor[index].picked;\r\n                setColors(newColor);\r\n                updatePickedColors(newColor);\r\n            }}></CandidateColorView>\r\n        </Fragment>\r\n    );\r\n}\r\nexport default ColorGenerator;\r\n\r\ninterface IColorBlockStatu {\r\n    color: string;\r\n    picked: boolean;\r\n}\r\n\r\ninterface ICandidateColorViewProp {\r\n    colorStatus: Array<IColorBlockStatu>;\r\n    onColorPressed(index: number): void;\r\n}\r\n\r\nconst CandidateColorView: FC<ICandidateColorViewProp> = (props) => {\r\n    const { colorStatus, onColorPressed } = props;\r\n    const candidateColorList: Array<ReactElement> = colorStatus.map((colorStatu, index) => (\r\n        <TouchableOpacity key={index} onPress={() => onColorPressed(index)} style={{ backgroundColor: colorStatu.color, flex: 1, minWidth: 128, minHeight: 128, justifyContent: 'center', alignContent: 'center' }}>\r\n            <Text style={styles.colorCodeText}>{colorStatu.color}</Text>\r\n            <Text style={styles.pickedText}>{colorStatu.picked ? 'Picked!' : ''}</Text>\r\n        </TouchableOpacity>\r\n    ));\r\n    return (\r\n        <View style={{ flex: 1, flexWrap: 'wrap', flexDirection: 'row', }}>\r\n            {candidateColorList}\r\n        </View>\r\n    );\r\n}\r\n\r\ninterface IPickedColorViewProp {\r\n    colors: Array<string>;\r\n}\r\n\r\nconst PickedColorView: FC<IPickedColorViewProp> = (props) => {\r\n    const { colors } = props;\r\n    const pickedColorList: Array<ReactElement> = colors.map((color, index) => (\r\n        <View key={index} style={{ backgroundColor: color, width: 24, height: 24 }}></View>\r\n    ));\r\n    return (\r\n        <View style={{ justifyContent: 'center', flexWrap: 'wrap', flexDirection: 'row', minHeight: 24 }}>\r\n            <Text style={{ color: '#ffffff' }}>Picked colors: </Text>\r\n            {pickedColorList}\r\n        </View>\r\n    );\r\n}\r\n\r\nfunction getRandomColor(): string {\r\n    let result: string = '#';\r\n    while (result.length < 7) {\r\n        let randomNum: number = Math.floor(Math.random() * 255);\r\n        let hexStr: string = decimalToHexadecimal(randomNum);\r\n        hexStr = hexStr.padStart(2, '0');\r\n        result += hexStr;\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction decimalToHexadecimal(value: number): string {\r\n    return parseInt(value.toString()).toString(16);\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    colorCodeText: {\r\n        color: '#ffffff',\r\n        textAlign: 'center',\r\n        textShadowColor: 'black',\r\n        textShadowOffset: { width: 1, height: 1 },\r\n        textShadowRadius: 4\r\n    },\r\n    pickedText: {\r\n        fontSize: 24,\r\n        fontWeight: 'bold',\r\n        textAlign: 'center',\r\n        textShadowColor: 'black',\r\n        textShadowOffset: { width: 3, height: 3 },\r\n        textShadowRadius: 4,\r\n        color: '#ffffff'\r\n    },\r\n});\r\n","import { StatusBar } from 'expo-status-bar';\r\nimport { StyleSheet, Text, View } from 'react-native';\r\nimport { Helmet } from 'react-helmet';\r\nimport ColorGenerator from './components/ColorGenerator';\r\nimport packageJson from './package.json';\r\n\r\nexport default function App() {\r\n  return (\r\n      <View style={styles.container}>\r\n      <Helmet>\r\n        <title>Random Color Generator</title>\r\n        <meta name='description' content='A random color generator for people who are struggling to find a color.😘' />\r\n        <meta name='keywords' content='color generator,YY' />\r\n        <meta property='og:title' content='Random Color Generator' />\r\n        <meta property='og:description' content='A random color generator for people who are struggling to find a color.😘' />\r\n        <meta property='og:type' content='website' />\r\n        <meta property='og:url' content={packageJson.homepage} />\r\n        <meta property='og:image' content={require('./assets/ogimage.png')} />\r\n        <meta name='theme-color' content='#111111' />\r\n      </Helmet>\r\n        <Text style={styles.title}>Color Generator</Text>\r\n        <ColorGenerator></ColorGenerator>\r\n        <Text style={styles.footer}>Version: {packageJson.version}</Text>\r\n        <StatusBar style='auto' />\r\n      </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    minHeight: '100%',\r\n    backgroundColor: '#111111',\r\n  },\r\n  title: {\r\n    color: '#ffffff',\r\n    fontSize: 40,\r\n    textAlign: 'center',\r\n    padding: 2\r\n  },\r\n  footer: {\r\n    color: '#ffffff',\r\n    textAlign: 'center',\r\n    padding: 2\r\n  }\r\n});\r\n","module.exports = __webpack_public_path__ + \"static/media/ogimage.2ddb989f.png\";"],"sourceRoot":""}