{"version":3,"sources":["components/ColorGenerator.tsx","App.tsx","assets/ogimage.png"],"names":["DEFAULT_COLORS","ColorGenerator","useState","map","color","picked","colors","setColors","Array","pickedColors","setPickedColors","colorStatus","onColorPressed","index","newColor","newPickedColors","forEach","push","updatePickedColors","View","style","flexDirection","justifyContent","flexWrap","flex","minWidth","Button","title","onPress","i","length","splice","colorStatu","array","getRandomColor","CandidateColorView","props","colorBlockList","colorCode","onPressed","ScrollView","contentContainerStyle","styles","colorBlocksContainer","ColorBlock","flexAnim","useRef","Animated","Value","current","minWidthAnim","useEffect","timing","toValue","duration","useNativeDriver","start","backgroundColor","minHeight","TouchableOpacity","Text","colorCodeText","pickedText","PickedColorView","pickedColorList","width","height","marginVertical","result","randomNum","Math","floor","random","hexStr","parseInt","toString","padStart","StyleSheet","create","textAlign","textShadowColor","textShadowOffset","textShadowRadius","fontSize","fontWeight","flexGrow","flexBasis","App","container","Helmet","name","content","property","packageJson","homepage","require","footer","version","StatusBar","margin","padding","module","exports"],"mappings":"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","file":"static/js/app.34da752f.chunk.js","sourcesContent":["import React, { FC, Fragment, ReactElement, useEffect, useRef, useState } from 'react';\r\nimport { Animated, Button, ScrollView, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\r\n\r\nconst DEFAULT_COLORS: Array<string> = [\r\n    '#000000', '#111111', '#222222', '#333333', '#444444', '#555555', '#666666', '#777777', '#888888', '#999999'\r\n]\r\n\r\nconst ColorGenerator: FC = () => {\r\n    const [colors, setColors] = useState(DEFAULT_COLORS.map(color => {\r\n        return {\r\n            color: color,\r\n            picked: false\r\n        }\r\n    }));\r\n    const [pickedColors, setPickedColors] = useState(new Array<string>());\r\n    const updatePickedColors = (newColor: Array<IColorBlockStatu>) => {\r\n        const newPickedColors: Array<string> = Array<string>();\r\n        newColor.forEach(color => {\r\n            if (color.picked) {\r\n                newPickedColors.push(color.color);\r\n            }\r\n        });\r\n        setPickedColors(newPickedColors);\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <PickedColorView colors={pickedColors}></PickedColorView>\r\n            <CandidateColorView colorStatus={colors} onColorPressed={(index) => {\r\n                const newColor: Array<IColorBlockStatu> = new Array<IColorBlockStatu>(...colors);\r\n                newColor[index].picked = !newColor[index].picked;\r\n                setColors(newColor);\r\n                updatePickedColors(newColor);\r\n            }} />\r\n            <View style={{ flexDirection: 'row', justifyContent: 'center', flexWrap: 'wrap' }}>\r\n                <View style={{ flex: 1, minWidth: 300 }}>\r\n                    <Button title='Clear unpicked color' onPress={() => {\r\n                        const newColor: Array<IColorBlockStatu> = new Array<IColorBlockStatu>(...colors);\r\n                        for (let i: number = newColor.length - 1; i >= 0 && newColor.length > 1; i--) {\r\n                            if (newColor[i].picked === false) {\r\n                                newColor.splice(i, 1);\r\n                            }\r\n                        }\r\n                        setColors(newColor);\r\n                    }} />\r\n                </View>\r\n                <View style={{ flex: 1, minWidth: 300 }}>\r\n                    <Button title='Random generate unpicked color' onPress={() => {\r\n                        const newColor: Array<IColorBlockStatu> = new Array<IColorBlockStatu>(...colors);\r\n                        newColor.forEach((colorStatu, index, array) => {\r\n                            if (!colorStatu.picked) {\r\n                                array[index].color = getRandomColor();\r\n                            }\r\n                        })\r\n                        setColors(newColor);\r\n                    }} />\r\n                </View>\r\n                <View style={{ flex: 1, minWidth: 300 }}>\r\n                    <Button title='Add new color' onPress={() => {\r\n                        const newColor: Array<IColorBlockStatu> = new Array<IColorBlockStatu>(...colors);\r\n                        newColor.push({\r\n                            color: getRandomColor(),\r\n                            picked: false\r\n                        });\r\n                        setColors(newColor);\r\n                    }} />\r\n                </View>\r\n            </View>\r\n        </Fragment>\r\n    );\r\n}\r\nexport default ColorGenerator;\r\n\r\ninterface IColorBlockStatu {\r\n    color: string;\r\n    picked: boolean;\r\n}\r\n\r\ninterface ICandidateColorViewProp {\r\n    colorStatus: Array<IColorBlockStatu>;\r\n    onColorPressed(index: number): void;\r\n}\r\n\r\nconst CandidateColorView: FC<ICandidateColorViewProp> = (props) => {\r\n    const { colorStatus, onColorPressed } = props;\r\n    const colorBlockList: Array<ReactElement> = colorStatus.map((colorStatu, index) => (\r\n        <ColorBlock key={index} colorCode={colorStatu.color} picked={colorStatu.picked} onPressed={() => onColorPressed(index)} />\r\n    ));\r\n    return (\r\n        <ScrollView contentContainerStyle={styles.colorBlocksContainer}>\r\n            {colorBlockList}\r\n        </ScrollView >\r\n    );\r\n}\r\n\r\ninterface IColorBlockProp {\r\n    colorCode: string;\r\n    picked: boolean;\r\n    onPressed(): void;\r\n}\r\n\r\nconst ColorBlock: FC<IColorBlockProp> = (props) => {\r\n    const { colorCode, picked, onPressed } = props;\r\n    const flexAnim: Animated.Value = useRef(new Animated.Value(0)).current;\r\n    const minWidthAnim: Animated.Value = useRef(new Animated.Value(24)).current;\r\n    useEffect(() => {\r\n        Animated.timing(\r\n            flexAnim, {\r\n            toValue: 1,\r\n            duration: 666,\r\n            useNativeDriver: true\r\n        }\r\n        ).start();\r\n    }, [flexAnim]);\r\n    useEffect(() => {\r\n        Animated.timing(\r\n            minWidthAnim, {\r\n            toValue: 128,\r\n            duration: 666,\r\n            useNativeDriver: true\r\n        }\r\n        ).start();\r\n    }, [minWidthAnim]);\r\n    return (\r\n        <Animated.View style={{ backgroundColor: colorCode, flex: flexAnim, minWidth: minWidthAnim, minHeight: 64 }}>\r\n            <TouchableOpacity style={{ flex: 1, justifyContent: 'center' }} onPress={() => onPressed()}>\r\n                <Text style={styles.colorCodeText}>{colorCode}</Text>\r\n                <Text style={styles.pickedText}>{picked ? 'Picked!' : ''}</Text>\r\n            </TouchableOpacity>\r\n        </Animated.View>\r\n    );\r\n}\r\n\r\ninterface IPickedColorViewProp {\r\n    colors: Array<string>;\r\n}\r\n\r\nconst PickedColorView: FC<IPickedColorViewProp> = (props) => {\r\n    const { colors } = props;\r\n    const pickedColorList: Array<ReactElement> = colors.map((color, index) => (\r\n        <View key={index} style={{ backgroundColor: color, width: 24, height: 24 }}></View>\r\n    ));\r\n    return (\r\n        <View style={{ justifyContent: 'center', flexWrap: 'wrap', flexDirection: 'row', marginVertical: 4 }}>\r\n            <Text style={{ color: '#ffffff', minHeight: 24 }}>Picked colors: </Text>\r\n            {pickedColorList}\r\n        </View>\r\n    );\r\n}\r\n\r\nfunction getRandomColor(): string {\r\n    let result: string = '#';\r\n    while (result.length < 7) {\r\n        let randomNum: number = Math.floor(Math.random() * 255);\r\n        let hexStr: string = decimalToHexadecimal(randomNum);\r\n        hexStr = hexStr.padStart(2, '0');\r\n        result += hexStr;\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction decimalToHexadecimal(value: number): string {\r\n    return parseInt(value.toString()).toString(16);\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    colorCodeText: {\r\n        color: '#ffffff',\r\n        textAlign: 'center',\r\n        textShadowColor: 'black',\r\n        textShadowOffset: { width: 1, height: 1 },\r\n        textShadowRadius: 4\r\n    },\r\n    pickedText: {\r\n        fontSize: 24,\r\n        fontWeight: 'bold',\r\n        textAlign: 'center',\r\n        textShadowColor: 'black',\r\n        textShadowOffset: { width: 3, height: 3 },\r\n        textShadowRadius: 4,\r\n        color: '#ffffff'\r\n    },\r\n    colorBlocksContainer: {\r\n        flexGrow: 1,\r\n        flexBasis: 0,\r\n        flexWrap: 'wrap',\r\n        flexDirection: 'row'\r\n    }\r\n});\r\n","import { StatusBar } from 'expo-status-bar';\r\nimport { StyleSheet, Text, View } from 'react-native';\r\nimport { Helmet } from 'react-helmet';\r\nimport ColorGenerator from './components/ColorGenerator';\r\nimport packageJson from './package.json';\r\n\r\nexport default function App() {\r\n  return (\r\n    <View style={styles.container}>\r\n      <Helmet>\r\n        <title>Random Color Generator</title>\r\n        <meta name='description' content='A random color generator for people who are struggling to find a color.😘' />\r\n        <meta name='keywords' content='color generator,YY' />\r\n        <meta property='og:title' content='Random Color Generator' />\r\n        <meta property='og:description' content='A random color generator for people who are struggling to find a color.😘' />\r\n        <meta property='og:type' content='website' />\r\n        <meta property='og:url' content={packageJson.homepage} />\r\n        <meta property='og:image' content={require('./assets/ogimage.png')} />\r\n        <meta name='theme-color' content='#111111' />\r\n      </Helmet>\r\n      <Text style={styles.title}>Color Generator</Text>\r\n      <ColorGenerator></ColorGenerator>\r\n      <Text style={styles.footer}>Version: {packageJson.version}</Text>\r\n      <StatusBar style='auto' />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#111111',\r\n  },\r\n  title: {\r\n    color: '#ffffff',\r\n    fontSize: 40,\r\n    textAlign: 'center',\r\n    margin: 4\r\n  },\r\n  footer: {\r\n    color: '#ffffff',\r\n    textAlign: 'center',\r\n    padding: 2\r\n  }\r\n});\r\n","module.exports = __webpack_public_path__ + \"static/media/ogimage.2ddb989f.png\";"],"sourceRoot":""}